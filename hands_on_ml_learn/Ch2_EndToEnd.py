# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_core.ipynb.

# %% auto 0
__all__ = ['load_housing_data', 'is_id_in_test_set', 'create_train_test_split', 'describe_percentiles']

# %% ../nbs/00_core.ipynb 5
def load_housing_data():
    "loads california housing data needed for this project"
    tarball_path = Path("datasets/housing.tgz")
    if not tarball_path.is_file():
        Path("datasets").mkdir(parents=True, exist_ok=True)
        url = "https://github.com/ageron/data/raw/main/housing.tgz"
        urllib.request.urlretrieve(url, tarball_path)
        with tarfile.open(tarball_path) as housing_tarball:
            housing_tarball.extractall(path="datasets")

    return pd.read_csv(Path("datasets/housing/housing.csv"))

# %% ../nbs/00_core.ipynb 14
def is_id_in_test_set(
    identifier: int,  # unique identifier for the record
    test_ratio: float = 0.2,  # what % of the data should be reserved for test
) -> bool:  # True if the given record should be in the test set
    "determines whether a given record should qualify as the test set or not"
    max_value = 2**32
    return crc32(np.int64(identifier)) < test_ratio * max_value

# %% ../nbs/00_core.ipynb 16
def create_train_test_split(
    data: pd.DataFrame,  # the original dataset to split
    test_ratio: float,  # how much of the data should be in the test set
    id_column: str = "index",  # the column used to create the test and training indices
) -> Tuple[pd.DataFrame, pd.DataFrame]:  # two dataframes, one training, one test
    ids = data[id_column]
    in_test_set = ids.apply(lambda id_: is_id_in_test_set(id_, test_ratio))
    training_set = data.loc[~in_test_set]
    test_set = data.loc[in_test_set]

    return training_set, test_set

# %% ../nbs/00_core.ipynb 19
def describe_percentiles(
    df: pd.DataFrame,  # dataframe containing columns you want profiled
    percentiles: List[
        float
    ] = None,  # the percentiles you want, defaults to showing tails
) -> pd.DataFrame:  # return the results as a pandas dataframe
    if percentiles is None:
        percentiles = [0.0, 0.05, 0.1, 0.25, 0.5, 0.75, 0.9, 0.95, 0.975, 0.99, 0.999]

    return df.describe(percentiles=percentiles)
